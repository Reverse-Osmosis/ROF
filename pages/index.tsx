import {useEffect, useState, useMemo} from "react";
import {useWallet} from "@cosmos-kit/react";
import {assets} from "chain-registry";
import {AssetList, Asset} from "@chain-registry/types";

// import cosmwasm client generated with cosmwasm-ts-codegen
import {HackCw20QueryClient} from "../codegen/HackCw20.client";

import {
    Box,
    Divider,
    Grid,
    Heading,
    Text,
    Stack,
    Container,
    Link,
    Button,
    Flex,
    Icon,
    useColorMode,
    useColorModeValue,
} from "@chakra-ui/react";
import {BsFillMoonStarsFill, BsFillSunFill} from "react-icons/bs";
import {dependencies, products} from "../config";

import {WalletStatus} from "@cosmos-kit/core";
import {Product, Dependency, WalletSection} from "../components";
import Head from "next/head";
import PopUpAtom from "../components/ui/atoms/PopUpAtom/PopUp.atom";
import {Layout} from "../styles/Layout.styled";
import HeaderLayout from "../components/ui/layout/HeaderLayout/Header.layout";
import FooterLayout from "../components/ui/layout/FooterLayout/Footer.layout";
import MainLayoutLayout from "../components/ui/layout/MainLayout/MainLayout.layout";

const library = {
    title: "OsmoJS",
    text: "OsmoJS",
    href: "https://github.com/osmosis-labs/osmojs",
};

// const chainName = 'osmosis';
const chainName = "osmosistestnet";
const chainassets: AssetList = assets.find(
    (chain) => chain.chain_name === chainName
) as AssetList;
const coin: Asset = chainassets.assets.find(
    (asset) => asset.base === "uosmo"
) as Asset;

export default function Home() {
    const {colorMode, toggleColorMode} = useColorMode();

    const {
        getStargateClient,
        getCosmWasmClient,
        address,
        setCurrentChain,
        currentWallet,
        walletStatus,
    } = useWallet();

    useEffect(() => {
        setCurrentChain(chainName);
    }, [chainName]);

    const color = useColorModeValue("primary.500", "primary.200");

    // get cw20 balance
    const [cw20Client, setCw20Client] = useState<HackCw20QueryClient | null>(
        null
    );
    useEffect(() => {
        getCosmWasmClient().then((cosmwasmClient) => {
            if (!cosmwasmClient || !address) {
                console.error("stargateClient undefined or address undefined.");
                return;
            }

            setCw20Client(
                new HackCw20QueryClient(
                    cosmwasmClient,
                    "osmo1y0ywcujptlmnx4fgstlqfp7nftc8w5qndsfds9wxwtm0ltjpzp4qdj09j8"
                )
            );
        });
    }, [address, getCosmWasmClient]);
    const [cw20Bal, setCw20Bal] = useState<string | null>(null);
    useEffect(() => {
        if (cw20Client && address) {
            cw20Client
            .balance({
                // TODO: replace with `address` !!!
                address: "osmo10vcqfvecwmvfr46cn0ju024xz7khutjtdsg5ga",
            })
            .then((b) => setCw20Bal(b.balance));
        }
    }, [cw20Client, address]);

    return (
        <MainLayoutLayout>
            <Container maxW="5xl" py={10}>
                <Head>
                    <title>Reverse Osmosis</title>
                    <meta name="description" content="Generated by create cosmos app"/>
                    <link rel="icon" href="/favicon.ico"/>
                </Head>
                {/* <WalletSection chainName={chainName} /> */}

                {/* <div>
          HackCW20 Balance:{" "}
          {walletStatus === WalletStatus.Disconnected
            ? "Connect wallet!"
            : cw20Bal ?? "loading..."}
        </div> */}
                {walletStatus === WalletStatus.Disconnected && (
                    <Box textAlign="center">
                        <Heading
                            as="h3"
                            fontSize={{base: "1xl", sm: "2xl", md: "2xl"}}
                            fontWeight="extrabold"
                            m={30}
                        >
                            Connect your wallet!
                        </Heading>
                    </Box>
                )}
            </Container>
            {/* <PopUpAtom /> */}
        </MainLayoutLayout>
    );
}
